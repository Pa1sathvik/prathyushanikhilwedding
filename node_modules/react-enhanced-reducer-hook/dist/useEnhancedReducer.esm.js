import { useState } from 'react';

function compose() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  if (fns.length === 0) return function (arg) {
    return arg;
  };
  if (fns.length === 1) return fns[0];
  return fns.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

function useEnhancedReducer(reducer, initialState) {
  var middlewares = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var hook = useState(initialState);
  var state = hook[0];
  var setState = hook[1];

  var dispatch = function dispatch(action) {
    state = reducer(state, action);
    setState(state);
    return action;
  };

  var enhancedDispatch;
  var store = {
    getState: function getState() {
      return state;
    },
    dispatch: function dispatch() {
      return enhancedDispatch.apply(void 0, arguments);
    }
  };
  var chain = middlewares.map(function (middleware) {
    return middleware(store);
  });
  enhancedDispatch = compose.apply(void 0, chain)(dispatch);
  return [state, enhancedDispatch];
}

export default useEnhancedReducer;
